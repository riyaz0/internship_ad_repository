-- The Following Example Returns One Because It Is The First Non - Null Argument :

SELECT
    COALESCE (NULL , 1)
FROM
    Dual;
  
-- The Following Example Returns Null Because All Arguments Are Null :

SELECT
    COALESCE (NULL , NULL , NULL)
FROM
    Dual;
  
-- The Following Example Returns A Value With Character Type Because All Arguments Are Characters :

SELECT
    COALESCE (NULL , 'A' , 'B') Result
FROM
    Dual;
  
-- Similarly , The Following Example Returns A Value With Numeric Type :

SELECT
    COALESCE (NULL , 1 , 2) Result
FROM
    Dual;
  
-- However , The Following Example Uses Arguments Of Different Types For The COALESCE() Function , Because The COALESCE() Function Tried To Convert The Character Type Of The Third Argument To A Numeric Type Of The Second Argument That Resulted In An Error :

SELECT
    COALESCE (NULL , 1 , 'A')
FROM
    Dual;
  
-- The Function Stops Evaluating The Remaining Expressions Once It Finds The First One Evaluates To A Non - Null Value :

SELECT
    COALESCE (1 + 1 , 1 / 0)
FROM
    Dual;
  
-- Create Employees Table :
  
CREATE TABLE Employees (
	EmployeeID NUMBER (4) CONSTRAINT PK_Employees PRIMARY KEY ,
    FirstName VARCHAR2 (100) NOT NULL ,
    LastName VARCHAR2 (100) NOT NULL
);

-- Insert Data Into Employees Table :

INSERT INTO Employees (EmployeeID , FirstName , LastName) VALUES (7369 , 'Mary' , 'Bailey');

INSERT INTO Employees (EmployeeID , FirstName , LastName) VALUES (7499 , 'John' , 'Rivera');

INSERT INTO Employees (EmployeeID , FirstName , LastName) VALUES (7521 , 'Joan' , 'Cooper');

-- Create EmergencyContacts Table :

CREATE TABLE EmergencyContacts (
    ContactID NUMBER GENERATED BY DEFAULT AS IDENTITY ,
    EmployeeID NUMBER NOT NULL ,
    FirstName VARCHAR2 (100) NOT NULL ,
    LastName VARCHAR2 (100) NOT NULL ,
    Relationship VARCHAR2 (100) ,
    HomePhone VARCHAR2 (25) ,
    WorkPhone VARCHAR2 (25) ,
    CellPhone VARCHAR2 (25) ,
    PRIMARY KEY (ContactID) ,
    FOREIGN KEY (EmployeeID) 
    REFERENCES Employees (EmployeeID) ON DELETE CASCADE
);

-- Insert Data Into EmergencyContacts Table :

INSERT INTO EmergencyContacts (EmployeeID , FirstName , LastName , Relationship , HomePhone , WorkPhone , CellPhone) VALUES (7369 , 'Mary' , 'Bailey' , 'Wife' , NULL , '515.123.4568' , '515.123.4569');

INSERT INTO EmergencyContacts (EmployeeID , FirstName , LastName , Relationship , HomePhone , WorkPhone , CellPhone) VALUES (7499 , 'John' , 'Rivera' , 'Husband' , NULL , NULL , '515.123.3563');

INSERT INTO EmergencyContacts (EmployeeID , FirstName , LastName , Relationship , HomePhone , WorkPhone , CellPhone) VALUES (7521 , 'Joan' , 'Cooper' , 'Mother' , NULL , NULL , NULL);

-- The Following Query Retrieves The Employees And Their Emergency Contacts With Phone Numbers :

SELECT
    Emp.FirstName || ' ' || Emp.LastName Employees , EC.FirstName || ' ' || EC.LastName EmergencyContacts , Relationship , COALESCE (HomePhone , WorkPhone , CellPhone , 'N/A') Phones
FROM
    EmergencyContacts EC
INNER JOIN 
    Employees Emp USING (EmployeeID);
    
-- The COALESCE() Function And NVL() Seems To Be Similar But Their Implementations Are Different :

SELECT
    COALESCE (1 , NULL)
FROM
    Dual;

SELECT
    NVL (1 , NULL)
FROM
    Dual;
    
-- Both Statements Return The Same Result Which Is One. However , The COALESCE() Function Only Evaluates The First Expression To Determine The Result While The NVL() Function Evaluates Both Expressions :

SELECT
    COALESCE (1 , 1 / 0)
FROM
    Dual;

-- The Statement Above Returned 1 Whereas The Following Example Causes An Error :

SELECT
    NVL(1 , 1 / 0)
FROM
    Dual;